blueprint:
  name: Voice - Multi-User Find My Phone - Full LLM Script
  author: r3draid3r04
  description: |
    # Multi-User Find My Phone

    This script allows you to trigger a “Find My Phone” notification for multiple users via voice commands.
    Each user has a trigger input_boolean and a mobile device target.
    Notifications will repeat until the recipient presses the “I Have It” button.
    
    ### Setup
    - Create input_booleans for each user (trigger booleans)
    - Create a global acknowledge boolean (stops all alarms)
    - Provide mobile notify services for each user
    - Add voice trigger phrases (maps phrase → user)
    
    ### Example usage
    - “Find Kyle’s phone”
    - “Find Amy’s phone”

domain: script
homeassistant:
  min_version: 2024.10.0
input:
  users:
    name: Users / Devices
    description: List of users with their trigger boolean and mobile notify service
    input:
      name:
        name: User Name
        selector:
          text: {}
      trigger_boolean:
        name: Trigger Input Boolean
        selector:
          entity:
            domain: input_boolean
      mobile_target:
        name: Mobile Notify Service
        selector:
          text: {}
      notification_title:
        name: Notification Title
        default: "📱 Lost Phone – Please Help!"
        selector:
          text: {}
      notification_message:
        name: Notification Message
        default: "This phone belongs to {{name}}. If found, please return it to the owner."
        selector:
          text: {}
  ack_boolean:
    name: Acknowledge Input Boolean
    description: Stops all alarms when pressed
    selector:
      entity:
        domain: input_boolean
  repeat_delay:
    name: Repeat Delay
    default: "00:00:30"
    selector:
      text: {}
  trigger_phrases:
    name: Voice Trigger Phrases
    description: Phrases to trigger a user's phone alarm
    input:
      phrase:
        name: Phrase
        selector:
          text: {}
      user_name:
        name: Target User
        selector:
          text: {}

mode: parallel
max_exceeded: silent

sequence:
  - variables:
      users: !input users
      ack_boolean: !input ack_boolean
      repeat_delay: !input repeat_delay
      trigger_phrases: !input trigger_phrases
      phrase_triggered: "{{ trigger.event.data.text if trigger.event else '' }}"
  # Map voice phrase → user boolean
  - choose:
      - conditions: >
          {% for item in trigger_phrases %}
            {{ phrase_triggered.lower() == item.phrase.lower() }}
          {% endfor %}
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: >
                {% for user in users %}
                  {% for item in trigger_phrases %}
                    {% if user.name == item.user_name %}
                      {{ user.trigger_boolean }}
                    {% endif %}
                  {% endfor %}
                {% endfor %}

  # Repeat notifications until acknowledged
  - repeat:
      sequence:
        - choose:
            - conditions: |
                "{% for user in users %}
                  {{ is_state(user.trigger_boolean, 'on') }}
                {% endfor %}"
              sequence:
                - variables:
                    users: !input users
                - repeat:
                    for_each: "{{ users }}"
                    sequence:
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ is_state(item.trigger_boolean, 'on') }}"
                            sequence:
                              - service: "{{ item.mobile_target }}"
                                data:
                                  title: "{{ item.notification_title }}"
                                  message: "{{ item.notification_message | replace('{{name}}', item.name) }}"
                                  data:
                                    push:
                                      sound:
                                        name: default
                                        critical: 1
                                        volume: 1
                                    actions:
                                      - action: "ACKNOWLEDGE_ALARM"
                                        title: "I Have It"
                {% endfor %}
        - delay: "{{ repeat_delay }}"
      until:
        - condition: state
          entity_id: !input ack_boolean
          state: "on"

  # Wait for notification button press
  - wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "ACKNOWLEDGE_ALARM"
    timeout: "3600"
    continue_on_timeout: false
    then:
      - service: input_boolean.turn_on
        target:
          entity_id: !input ack_boolean
      - service: input_boolean.turn_off
        target:
          entity_id: >
            {{ users | map(attribute='trigger_boolean') | list | join(',') }}
