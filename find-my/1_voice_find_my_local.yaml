blueprint:
  name: Find My Phone (Single User)
  description: |
    Find my phone system for one user/device.
    Notification shows once, sound repeats until acknowledged.
  domain: automation
  author: r3draid3r04

  input:
    user_name:
      name: User Name
      selector:
        text: {}
    trigger_boolean:
      name: Trigger Input Boolean
      selector:
        entity:
          domain: input_boolean
    mobile_target:
      name: Mobile Notify Service
      selector:
        text: {}
    notification_title:
      name: Notification Title
      default: "ðŸ“± Lost Phone â€“ Please Help!"
      selector:
        text: {}
    notification_message:
      name: Notification Message
      default: "This phone belongs to {user_name}. If found, please return it to the owner."
      selector:
        text: {}
    ack_boolean:
      name: Acknowledge Input Boolean
      selector:
        entity:
          domain: input_boolean
    repeat_delay:
      name: Repeat Delay (seconds)
      default: 30
      selector:
        number:
          min: 5
          max: 300
          unit_of_measurement: seconds
    enable_voice_commands:
      name: Enable Voice Commands
      default: true
      selector:
        boolean: {}
    voice_phrases:
      name: Voice Trigger Phrases
      default: |
        find {user_name} phone
        find {user_name}'s phone
      selector:
        text:
          multiline: true

mode: restart

variables:
  user_name: !input user_name
  trigger_boolean: !input trigger_boolean
  mobile_target: !input mobile_target
  notification_title: !input notification_title
  notification_message: !input notification_message
  ack_boolean: !input ack_boolean
  repeat_delay: !input repeat_delay
  enable_voice_commands: !input enable_voice_commands
  voice_phrases_raw: !input voice_phrases
  voice_phrases_list: >
    {% if enable_voice_commands and voice_phrases_raw %}
      {% set phrases = voice_phrases_raw.split('\n') %}
      {% set processed = [] %}
      {% for phrase in phrases %}
        {% if phrase.strip() != '' %}
          {% set processed_phrase = phrase.strip().replace('{user_name}', user_name) %}
          {% set processed = processed + [processed_phrase] %}
        {% endif %}
      {% endfor %}
      {{ processed }}
    {% else %}
      []
    {% endif %}

trigger:
  - platform: conversation
    command: "{{ voice_phrases_list if enable_voice_commands and voice_phrases_list|length > 0 else ['never_match_dummy_phrase'] }}"
    id: voice_trigger
  - platform: state
    entity_id: !input trigger_boolean
    to: "on"
    id: boolean_trigger

condition: []

action:
  # Handle voice trigger
  - if:
      - condition: trigger
        id: voice_trigger
    then:
      - service: input_boolean.turn_on
        target:
          entity_id: !input trigger_boolean
      - service: conversation.process
        data:
          text: "Locating {{ user_name }}'s phone now!"

  # Send notification once
  - service: !input mobile_target
    data:
      title: "{{ notification_title }}"
      message: "{{ notification_message.replace('{user_name}', user_name) }}"
      data:
        actions:
          - action: "ACKNOWLEDGE_PHONE_ALARM"
            title: "I Have It"
        push:
          sound:
            name: default
            critical: 1
            volume: 1

  # Loop sound separately
  - repeat:
      sequence:
        - condition: state
          entity_id: !input trigger_boolean
          state: "on"
        - service: !input mobile_target
          data:
            data:
              push:
                sound:
                  name: default
                  critical: 1
                  volume: 1
        - delay:
            seconds: "{{ repeat_delay }}"
      until:
        - condition: state
          entity_id: !input ack_boolean
          state: "on"

  # Wait for acknowledge
  - wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "ACKNOWLEDGE_PHONE_ALARM"
    continue_on_timeout: false

  # Stop alarm
  - service: input_boolean.turn_off
    target:
      entity_id: !input trigger_boolean
  - service: input_boolean.turn_on
    target:
      entity_id: !input ack_boolean
  - delay:
      seconds: 2
  - service: input_boolean.turn_off
    target:
      entity_id: !input ack_boolean
